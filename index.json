{
  "api/BDeshi.Logging.ICategoryLogger-1.html": {
    "href": "api/BDeshi.Logging.ICategoryLogger-1.html",
    "title": "Interface ICategoryLogger<TLogCategory> | |",
    "keywords": "Interface ICategoryLogger<TLogCategory> Namespace BDeshi.Logging public interface ICategoryLogger<TLogCategory> where TLogCategory : struct, Enum, IConvertible Type Parameters TLogCategory Properties DefaultContext UnityEngine.Object DefaultContext { get; set; } Property Value Object Methods Log(TLogCategory, string, LogPriority) void Log(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority Log(TLogCategory, string, Object, LogPriority) void Log(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority LogError(TLogCategory, string, LogPriority) void LogError(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority LogError(TLogCategory, string, Object, LogPriority) void LogError(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority LogWarning(TLogCategory, string, LogPriority) void LogWarning(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority LogWarning(TLogCategory, string, Object, LogPriority) void LogWarning(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority"
  },
  "api/BDeshi.Logging.ILoggerMixin-1.html": {
    "href": "api/BDeshi.Logging.ILoggerMixin-1.html",
    "title": "Interface ILoggerMixin<TLogCategory> | |",
    "keywords": "Interface ILoggerMixin<TLogCategory> Namespace BDeshi.Logging public interface ILoggerMixin<TLogCategory> where TLogCategory : struct, Enum, IConvertible Type Parameters TLogCategory Extension Methods LoggingExtensions.LogError<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.LogWarning<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.Log<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) Properties Logger ICategoryLogger<TLogCategory> Logger { get; } Property Value ICategoryLogger<TLogCategory> gameObject GameObject gameObject { get; } Property Value GameObject"
  },
  "api/BDeshi.Logging.ISubCategoryLoggerMixin-1.html": {
    "href": "api/BDeshi.Logging.ISubCategoryLoggerMixin-1.html",
    "title": "Interface ISubCategoryLoggerMixin<TLogCategory> | |",
    "keywords": "Interface ISubCategoryLoggerMixin<TLogCategory> Namespace BDeshi.Logging Mixin for calling logger easily public interface ISubCategoryLoggerMixin<TLogCategory> : ILoggerMixin<TLogCategory> where TLogCategory : struct, Enum, IConvertible Type Parameters TLogCategory Inherited Members ILoggerMixin<TLogCategory>.gameObject ILoggerMixin<TLogCategory>.Logger Extension Methods LoggingExtensions.LogError<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.LogWarning<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.Log<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.LogError<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) LoggingExtensions.LogWarning<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) LoggingExtensions.Log<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) Properties Category TLogCategory Category { get; } Property Value TLogCategory"
  },
  "api/BDeshi.Logging.LogPriority.html": {
    "href": "api/BDeshi.Logging.LogPriority.html",
    "title": "Enum LogPriority | |",
    "keywords": "Enum LogPriority Namespace BDeshi.Logging Priority level separate from log/warning/error trifecta public enum LogPriority Fields High = 2 Low = 0 Normal = 1 PlusUltra = 4 Ultra = 3"
  },
  "api/BDeshi.Logging.LoggingExtensions.html": {
    "href": "api/BDeshi.Logging.LoggingExtensions.html",
    "title": "Class LoggingExtensions | |",
    "keywords": "Class LoggingExtensions Namespace BDeshi.Logging public static class LoggingExtensions Inheritance object LoggingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlueColored(string) public static string BlueColored(this string s) Parameters s string Returns string Bolded(string, string) public static string Bolded(this string s, string color) Parameters s string color string Returns string Colored(string, Color) public static string Colored(this string s, Color color) Parameters s string color Color Returns string Colored(string, string) public static string Colored(this string s, string color) Parameters s string color string Returns string GreenColored(string) public static string GreenColored(this string s) Parameters s string Returns string LogError<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) public static void LogError<TLogCategory>(this ILoggerMixin<TLogCategory> categoryLogger, TLogCategory category, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters categoryLogger ILoggerMixin<TLogCategory> category TLogCategory msg string priority LogPriority Type Parameters TLogCategory LogError<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) public static void LogError<TLogCategory>(this ISubCategoryLoggerMixin<TLogCategory> subCategoryLogger, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters subCategoryLogger ISubCategoryLoggerMixin<TLogCategory> msg string priority LogPriority Type Parameters TLogCategory LogWarning<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) public static void LogWarning<TLogCategory>(this ILoggerMixin<TLogCategory> categoryLogger, TLogCategory category, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters categoryLogger ILoggerMixin<TLogCategory> category TLogCategory msg string priority LogPriority Type Parameters TLogCategory LogWarning<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) public static void LogWarning<TLogCategory>(this ISubCategoryLoggerMixin<TLogCategory> subCategoryLogger, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters subCategoryLogger ISubCategoryLoggerMixin<TLogCategory> msg string priority LogPriority Type Parameters TLogCategory Log<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) public static void Log<TLogCategory>(this ILoggerMixin<TLogCategory> categoryLogger, TLogCategory category, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters categoryLogger ILoggerMixin<TLogCategory> category TLogCategory msg string priority LogPriority Type Parameters TLogCategory Log<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) public static void Log<TLogCategory>(this ISubCategoryLoggerMixin<TLogCategory> subCategoryLogger, string msg, LogPriority priority = LogPriority.Normal) where TLogCategory : struct, Enum, IConvertible Parameters subCategoryLogger ISubCategoryLoggerMixin<TLogCategory> msg string priority LogPriority Type Parameters TLogCategory RedColored(string) public static string RedColored(this string s) Parameters s string Returns string"
  },
  "api/BDeshi.Logging.SerializableCategoryLogger-1.html": {
    "href": "api/BDeshi.Logging.SerializableCategoryLogger-1.html",
    "title": "Class SerializableCategoryLogger<TLogCategory> | |",
    "keywords": "Class SerializableCategoryLogger<TLogCategory> Namespace BDeshi.Logging [Serializable] public class SerializableCategoryLogger<TLogCategory> : ICategoryLogger<TLogCategory> where TLogCategory : struct, Enum, IConvertible Type Parameters TLogCategory Inheritance object SerializableCategoryLogger<TLogCategory> Implements ICategoryLogger<TLogCategory> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SerializableCategoryLogger(TLogCategory, string, Object, LogPriority) public SerializableCategoryLogger(TLogCategory flags, string Prefix, UnityEngine.Object defaultContext = null, LogPriority minLogPriority = LogPriority.Normal) Parameters flags TLogCategory Prefix string defaultContext Object minLogPriority LogPriority SerializableCategoryLogger(TLogCategory, Object, LogPriority) public SerializableCategoryLogger(TLogCategory flags, UnityEngine.Object defaultContext = null, LogPriority minLogPriority = LogPriority.Normal) Parameters flags TLogCategory defaultContext Object minLogPriority LogPriority Fields CategoryColor public Color CategoryColor Field Value Color Flags public TLogCategory Flags Field Value TLogCategory MinLogPriority public LogPriority MinLogPriority Field Value LogPriority Prefix public string Prefix Field Value string Properties DefaultContext public UnityEngine.Object DefaultContext { get; set; } Property Value Object Methods Log(TLogCategory, string, LogPriority) public void Log(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority Log(TLogCategory, string, Object, LogPriority) public void Log(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority LogError(TLogCategory, string, LogPriority) public void LogError(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority LogError(TLogCategory, string, Object, LogPriority) public void LogError(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority LogWarning(TLogCategory, string, LogPriority) public void LogWarning(TLogCategory flag, string msg, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string priority LogPriority LogWarning(TLogCategory, string, Object, LogPriority) public void LogWarning(TLogCategory flag, string msg, UnityEngine.Object ctx, LogPriority priority = LogPriority.Normal) Parameters flag TLogCategory msg string ctx Object priority LogPriority"
  },
  "api/BDeshi.Logging.html": {
    "href": "api/BDeshi.Logging.html",
    "title": "Namespace BDeshi.Logging | |",
    "keywords": "Namespace BDeshi.Logging Classes LoggingExtensions SerializableCategoryLogger<TLogCategory> Interfaces ICategoryLogger<TLogCategory> ILoggerMixin<TLogCategory> ISubCategoryLoggerMixin<TLogCategory> Mixin for calling logger easily Enums LogPriority Priority level separate from log/warning/error trifecta"
  },
  "api/bdeshi.logging.Samples.TestLogCategory.html": {
    "href": "api/bdeshi.logging.Samples.TestLogCategory.html",
    "title": "Enum TestLogCategory | |",
    "keywords": "Enum TestLogCategory Namespace bdeshi.logging.Samples [Flags] public enum TestLogCategory Fields Monday = 2 Sunday = 1 Tuesday = 4"
  },
  "api/bdeshi.logging.Samples.TestLogger.html": {
    "href": "api/bdeshi.logging.Samples.TestLogger.html",
    "title": "Class TestLogger | |",
    "keywords": "Class TestLogger Namespace bdeshi.logging.Samples public class TestLogger : MonoBehaviour Inheritance object TestLogger Fields Logger public SerializableCategoryLogger<TestLogCategory> Logger Field Value SerializableCategoryLogger<TestLogCategory> testLogCategory public TestLogCategory testLogCategory Field Value TestLogCategory testLogPriority public LogPriority testLogPriority Field Value LogPriority Properties Instance public static TestLogger Instance { get; } Property Value TestLogger Methods logTest() public void logTest()"
  },
  "api/bdeshi.logging.Samples.TestSubLogger.html": {
    "href": "api/bdeshi.logging.Samples.TestSubLogger.html",
    "title": "Class TestSubLogger | |",
    "keywords": "Class TestSubLogger Namespace bdeshi.logging.Samples public class TestSubLogger : MonoBehaviour, ISubCategoryLoggerMixin<TestLogCategory>, ILoggerMixin<TestLogCategory> Inheritance object TestSubLogger Implements ISubCategoryLoggerMixin<TestLogCategory> ILoggerMixin<TestLogCategory> Extension Methods LoggingExtensions.LogError<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.LogWarning<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.Log<TLogCategory>(ILoggerMixin<TLogCategory>, TLogCategory, string, LogPriority) LoggingExtensions.LogError<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) LoggingExtensions.LogWarning<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) LoggingExtensions.Log<TLogCategory>(ISubCategoryLoggerMixin<TLogCategory>, string, LogPriority) Properties Category public TestLogCategory Category { get; } Property Value TestLogCategory Logger public ICategoryLogger<TestLogCategory> Logger { get; } Property Value ICategoryLogger<TestLogCategory> Methods logTest() public void logTest()"
  },
  "api/bdeshi.logging.Samples.html": {
    "href": "api/bdeshi.logging.Samples.html",
    "title": "Namespace bdeshi.logging.Samples | |",
    "keywords": "Namespace bdeshi.logging.Samples Classes TestLogger TestSubLogger Enums TestLogCategory"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Md Maruf Billa Opu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "| |",
    "keywords": "A logger that allows you to filter logs based on a generic enum bitfield parameter Install via Git URL You can use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/BDeshiDev/Category-Based-Unity-Logger-.git#upm Install via OpenUPM https://openupm.com/packages/com.bdeshi.categorylogger/"
  }
}